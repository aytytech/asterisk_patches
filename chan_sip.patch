--- chan_sip.c	2018-12-19 18:13:28.211459932 -0200
+++ ayty_chan_sip.c	2018-12-19 18:13:28.159459859 -0200
@@ -15,7 +15,6 @@
  * the GNU General Public License Version 2. See the LICENSE file
  * at the top of the source tree.
  */
-
 /*!
  * \file
  * \brief Implementation of Session Initiation Protocol
@@ -221,7 +220,7 @@
 
 #include "asterisk.h"
 
-ASTERISK_FILE_VERSION(__FILE__, "$Revision$")
+ASTERISK_FILE_VERSION(__FILE__, " 13.6.1.1 - Ayty 2018.07.26.1 ")
 
 #include <signal.h>
 #include <sys/signal.h>
@@ -4275,6 +4274,9 @@ static int __sip_autodestruct(const void
 	return 0;
 }
 
+
+
+
 /*! \brief Schedule final destruction of SIP dialog.  This can not be canceled.
  *  This function is used to keep a dialog around for a period of time in order
  *  to properly respond to any retransmits. */
@@ -6715,6 +6717,8 @@ int hangup_sip2cause(int cause)
 	/* Possible values taken from causes.h */
 
 	switch(cause) {
+		case 400:	/* Bad Request */
+			return AST_CAUSE_CALL_IDENTITY_NOT_EXIST;
 		case 401:	/* Unauthorized */
 			return AST_CAUSE_CALL_REJECTED;
 		case 403:	/* Not found */
@@ -6722,13 +6726,13 @@ int hangup_sip2cause(int cause)
 		case 404:	/* Not found */
 			return AST_CAUSE_UNALLOCATED;
 		case 405:	/* Method not allowed */
-			return AST_CAUSE_INTERWORKING;
+			return AST_CAUSE_CALL_REJECTED;
 		case 407:	/* Proxy authentication required */
 			return AST_CAUSE_CALL_REJECTED;
 		case 408:	/* No reaction */
-			return AST_CAUSE_NO_USER_RESPONSE;
+			return AST_CAUSE_CALL_IDENTITY_CLEARED;
 		case 409:	/* Conflict */
-			return AST_CAUSE_NORMAL_TEMPORARY_FAILURE;
+			return AST_CAUSE_INTERWORKING;
 		case 410:	/* Gone */
 			return AST_CAUSE_NUMBER_CHANGED;
 		case 411:	/* Length required */
@@ -6742,13 +6746,13 @@ int hangup_sip2cause(int cause)
 		case 420:	/* Bad extension */
 			return AST_CAUSE_NO_ROUTE_DESTINATION;
 		case 480:	/* No answer */
-			return AST_CAUSE_NO_ANSWER;
+			return AST_CAUSE_NO_USER_RESPONSE;
 		case 481:	/* No answer */
 			return AST_CAUSE_INTERWORKING;
 		case 482:	/* Loop detected */
 			return AST_CAUSE_INTERWORKING;
 		case 483:	/* Too many hops */
-			return AST_CAUSE_NO_ANSWER;
+			return AST_CAUSE_EXCHANGE_ROUTING_ERROR;
 		case 484:	/* Address incomplete */
 			return AST_CAUSE_INVALID_NUMBER_FORMAT;
 		case 485:	/* Ambiguous */
@@ -6756,7 +6760,7 @@ int hangup_sip2cause(int cause)
 		case 486:	/* Busy everywhere */
 			return AST_CAUSE_BUSY;
 		case 487:	/* Request terminated */
-			return AST_CAUSE_INTERWORKING;
+			return AST_CAUSE_NORMAL_UNSPECIFIED;
 		case 488:	/* No codecs approved */
 			return AST_CAUSE_BEARERCAPABILITY_NOTAVAIL;
 		case 491:	/* Request pending */
@@ -6764,10 +6768,10 @@ int hangup_sip2cause(int cause)
 		case 493:	/* Undecipherable */
 			return AST_CAUSE_INTERWORKING;
 		case 500:	/* Server internal failure */
-			return AST_CAUSE_FAILURE;
+			return AST_CAUSE_INTERWORKING;
 		case 501:	/* Call rejected */
 			return AST_CAUSE_FACILITY_REJECTED;
-		case 502:
+		case 502:	
 			return AST_CAUSE_DESTINATION_OUT_OF_ORDER;
 		case 503:	/* Service unavailable */
 			return AST_CAUSE_CONGESTION;
@@ -6783,17 +6787,45 @@ int hangup_sip2cause(int cause)
 			return AST_CAUSE_UNALLOCATED;
 		case 606:	/* Not acceptable */
 			return AST_CAUSE_BEARERCAPABILITY_NOTAVAIL;
+		case 531:	/* Answering Machine Detected */
+			return AST_CAUSE_ANSWERING_MACHINE_DETECTEC;
+		case 532:	/* Call Dropped */
+			return AST_CAUSE_CALL_DROPPED;
+		case 533:	/* Communication Fail With Dialer */
+			return AST_CAUSE_FAIL_COMMUNICATION_WITH_DIALER;
+		case 534:	/* Error Recording */
+			return AST_CAUSE_ERROR_RECORDING;
+		case 535:	/* Internal Ipbx Congestion */
+			return AST_CAUSE_IPBX_INTERNAL_CONGESTION;
+		case 536:	/* Ipbx no route available */
+			return AST_CAUSE_IPBX_NO_ROUTE_AVAILABLE;
+		case 540:	/* IVR declined by customer */
+			return AST_CAUSE_INVERTED_IVR_DECLINED_BY_CUSTOMER;			
+		case 541:	/* Inverted ivr call later */
+			return AST_CAUSE_INVERTED_IVR_CALL_LATER;	
+		case 542:	/* Inverted ivr no response from customer side */
+			return AST_CAUSE_INVERTED_IVR_NO_RESPONSE_FROM_CUSTOMER_SIDE;			
+		case 543:	/* Vacant */
+			return AST_CAUSE_VACANT_143;
+		case 544:	/* Vacant */
+			return AST_CAUSE_VACANT_144;
+		case 545:	/* Blacklisted */
+			return AST_CAUSE_BLACKLISTED;
+		case 546:	/* Vacant */
+			return AST_CAUSE_NO_ANSWER_AYTY;
+		case 547:	/* Vacant */
+			return AST_CAUSE_VACANT_147;
+		case 548:	/* Vacant */
+			return AST_CAUSE_VACANT_148;
+		case 549:	/* Vacant */
+			return AST_CAUSE_VACANT_149;
+		case 550:	/* AMD Carrier message */
+			return AST_CAUSE_AMD_CARRIER_MESSAGE;
+		case 551:	/* AMD Initial silence */
+			return AST_CAUSE_AMD_INITIAL_SILENCE;
+		case 552:	/* AMD Message box */
+			return AST_CAUSE_AMD_MESSAGE_BOX;		
 		default:
-			if (cause < 500 && cause >= 400) {
-				/* 4xx class error that is unknown - someting wrong with our request */
-				return AST_CAUSE_INTERWORKING;
-			} else if (cause < 600 && cause >= 500) {
-				/* 5xx class error - problem in the remote end */
-				return AST_CAUSE_CONGESTION;
-			} else if (cause < 700 && cause >= 600) {
-				/* 6xx - global errors in the 4xx class */
-				return AST_CAUSE_INTERWORKING;
-			}
 			return AST_CAUSE_NORMAL;
 	}
 	/* Never reached */
@@ -6835,41 +6867,133 @@ int hangup_sip2cause(int cause)
 const char *hangup_cause2sip(int cause)
 {
 	switch (cause) {
-		case AST_CAUSE_UNALLOCATED:		/* 1 */
-		case AST_CAUSE_NO_ROUTE_DESTINATION:	/* 3 IAX2: Can't find extension in context */
-		case AST_CAUSE_NO_ROUTE_TRANSIT_NET:	/* 2 */
-			return "404 Not Found";
-		case AST_CAUSE_CONGESTION:		/* 34 */
-		case AST_CAUSE_SWITCH_CONGESTION:	/* 42 */
-			return "503 Service Unavailable";
-		case AST_CAUSE_NO_USER_RESPONSE:	/* 18 */
-			return "408 Request Timeout";
-		case AST_CAUSE_NO_ANSWER:		/* 19 */
-		case AST_CAUSE_UNREGISTERED:        /* 20 */
-			return "480 Temporarily unavailable";
-		case AST_CAUSE_CALL_REJECTED:		/* 21 */
-			return "403 Forbidden";
-		case AST_CAUSE_NUMBER_CHANGED:		/* 22 */
-			return "410 Gone";
-		case AST_CAUSE_NORMAL_UNSPECIFIED:	/* 31 */
-			return "480 Temporarily unavailable";
-		case AST_CAUSE_INVALID_NUMBER_FORMAT:
-			return "484 Address incomplete";
-		case AST_CAUSE_USER_BUSY:
-			return "486 Busy here";
-		case AST_CAUSE_FAILURE:
-			return "500 Server internal failure";
-		case AST_CAUSE_FACILITY_REJECTED:	/* 29 */
-			return "501 Not Implemented";
-		case AST_CAUSE_CHAN_NOT_IMPLEMENTED:
-			return "503 Service Unavailable";
-		/* Used in chan_iax2 */
-		case AST_CAUSE_DESTINATION_OUT_OF_ORDER:
-			return "502 Bad Gateway";
-		case AST_CAUSE_BEARERCAPABILITY_NOTAVAIL:	/* Can't find codec to connect to host */
-			return "488 Not Acceptable Here";
-		case AST_CAUSE_INTERWORKING:	/* Unspecified Interworking issues */
-			return "500 Network error";
+		case AST_CAUSE_INVALID_CALL_REFERENCE:							/* 81 */
+			case AST_CAUSE_CALL_IDENTITY_NOT_EXIST:							/* 83 */
+			case AST_CAUSE_CALL_IDENTITY_IN_USE:							/* 84 */
+			case AST_CAUSE_NO_CALL_SUSPENDED:								/* 85 */
+			case AST_CAUSE_NON_EXISTENT_CUG:								/* 90 */
+			case AST_CAUSE_INVALID_MSG_UNSPECIFIED:							/* 95 */
+			case AST_CAUSE_MANDATORY_IE_MISSING:							/* 96 */
+			case AST_CAUSE_MESSAGE_TYPE_NONEXIST:							/* 97 */
+			case AST_CAUSE_WRONG_MESSAGE:									/* 98 */
+			case AST_CAUSE_IE_NONEXIST:										/* 99 */
+			case AST_CAUSE_INVALID_IE_CONTENTS:								/* 100 */
+			case AST_CAUSE_WRONG_CALL_STATE:								/* 101 */
+			case AST_CAUSE_MANDATORY_IE_LENGTH_ERROR:						/* 103 */
+			case AST_CAUSE_UNRECOGNIZED_PARAMETER:							/* 110 */
+				return "400 Bad Request";
+			case AST_CAUSE_UNALLOCATED:										/* 1 */
+			case AST_CAUSE_NO_ROUTE_DESTINATION:							/* 3 IAX2: Can't find extension in context */
+			case AST_CAUSE_NO_ROUTE_TRANSIT_NET:							/* 2 */
+			case AST_CAUSE_MISDIALLED_TRUNK_PREFIX:							/* 5 */
+			case AST_CAUSE_ANSWERED_ELSEWHERE:								/* 26 */
+				return "404 Not Found";
+			case AST_CAUSE_NO_USER_RESPONSE:								/* 18 */
+			case AST_CAUSE_CALL_IDENTITY_CLEARED:							/* 86 */
+				return "408 Request Timeout";
+			case AST_CAUSE_NO_ANSWER:										/* 19 */
+			case AST_CAUSE_UNREGISTERED:   					   				/* 20 */
+			case AST_CAUSE_CHANNEL_UNACCEPTABLE:  							/* 6 */
+			case AST_CAUSE_IDENTIFIED_CHANNEL_NOT_EXIST:					/* 82 */
+				return "480 Temporarily unavailable";
+			case AST_CAUSE_CALL_REJECTED:									/* 21 */
+			case AST_CAUSE_OUTGOING_CALL_BARRED_CUG:  						/* 53 */
+			case AST_CAUSE_INCOMING_CALL_BARRED_CUG:  						/* 55 */
+			case AST_CAUSE_BEARERCAPABILITY_NOTAUTH: 			 			/* 57 */
+			case AST_CAUSE_INCONSISTENCY_SUBSCRIBER_CLASS: 			 		/* 62 */
+			case AST_CAUSE_USER_NOT_MEMBER_OF_CUG:  						/* 87 */
+				return "403 Forbidden";
+			case AST_CAUSE_NUMBER_CHANGED:									/* 22 */
+			case AST_CAUSE_REDIRECTED_TO_NEW_DESTINATION:					/* 23 */
+				return "410 Gone";
+			case AST_CAUSE_SEND_SPECIAL_TONE_INFORMATION:					/* 4 */
+			case AST_CAUSE_CALL_AWARDED_DELIVERED:							/* 7 */
+			case AST_CAUSE_PREEMPTION:										/* 8 */
+			case AST_CAUSE_PREEMPTION_CIRCUIT_RESERVED_FOR_USE:				/* 9 */
+			case AST_CAUSE_RESPONSE_TO_STATUS_ENQUIRY:						/* 30 */
+			case AST_CAUSE_NORMAL_UNSPECIFIED:								/* 31 */
+			case AST_CAUSE_PERMANENT_FRAME_OUT_OF_SERVICE:					/* 39 */
+			case AST_CAUSE_PERMANENT_FRAME_OPERATIONAL:						/* 40 */
+			case AST_CAUSE_PRECEDENCE_CALL_BLOCKED:							/* 46 */
+				return "487 Request Terminated";
+			case AST_CAUSE_EXCHANGE_ROUTING_ERROR:				 			/* 25 */
+				return "483 Too Many Hops";
+			case AST_CAUSE_INVALID_NUMBER_FORMAT: 							/* 28 */
+				return "484 Address incomplete";
+			case AST_CAUSE_USER_BUSY: 										/* 17 */
+				return "486 Busy here";
+			case AST_CAUSE_FACILITY_REJECTED:								/* 29 */
+			case AST_CAUSE_SERVICE_OR_OPTION_NOT_IMPLEMENTED:				/* 79 */
+				return "501 Not Implemented";
+			case AST_CAUSE_NORMAL_CIRCUIT_CONGESTION:						/* 34 */
+			case AST_CAUSE_NETWORK_OUT_OF_ORDER:  							/* 38 */
+			case AST_CAUSE_NORMAL_TEMPORARY_FAILURE: 						/* 41 */
+			case AST_CAUSE_SWITCH_CONGESTION: 								/* 42 */
+			case AST_CAUSE_ACCESS_INFO_DISCARDED: 							/* 43 */
+			case AST_CAUSE_REQUESTED_CHAN_UNAVAIL: 							/* 44 */
+			case AST_CAUSE_PRE_EMPTED: 										/* 45 */
+			case AST_CAUSE_RESOURCE_UNAVAILABLE: 							/* 47 */
+			case AST_CAUSE_QOS_UNAVAILABLE: 								/* 49 */
+			case AST_CAUSE_FACILITY_NOT_SUBSCRIBED: 						/* 50 */
+			case AST_CAUSE_SERVICE_UNAVAILABLE: 							/* 51 */
+			case AST_CAUSE_OUTGOING_CALL_BARRED: 							/* 52 */
+			case AST_CAUSE_INCOMING_CALL_BARRED: 							/* 54 */
+			case AST_CAUSE_OPTION_NOT_AVAILABLE: 							/* 63 */
+			case AST_CAUSE_CHAN_NOT_IMPLEMENTED: 							/* 66 */
+			case AST_CAUSE_FACILITY_NOT_IMPLEMENTED:			 			/* 69 */
+			case AST_CAUSE_INCOMPATIBLE_DESTINATION: 						/* 88 */
+				return "503 Service Unavailable";
+			/* Used in chan_iax2 */
+			case AST_CAUSE_DESTINATION_OUT_OF_ORDER: 						/* 27 */
+			case AST_CAUSE_INVALID_TRANSIT_NETWORK_SELECTION: 				/* 91 */
+				return "502 Bad Gateway";
+			case AST_CAUSE_BEARERCAPABILITY_NOTAVAIL:						/* 58  Can't find codec to connect to host */
+			case AST_CAUSE_BEARERCAPABILITY_NOTIMPL: 						/* 65 */
+			case AST_CAUSE_RESTRICTED_BEARER_AVAILABLE: 					/* 70 */
+				return "488 Not Acceptable Here";
+			case AST_CAUSE_RECOVERY_ON_TIMER_EXPIRE: 						/* 102 */		
+				return "504 Gateway timeout";
+			case AST_CAUSE_PROTOCOL_ERROR: 									/* 111 */
+			case AST_CAUSE_INTERWORKING:				  					/* 127 */
+				return "500 Server internal failure";
+			case AST_CAUSE_ANSWERING_MACHINE_DETECTEC:  		/* 131 */
+				return "531 Answering Machine Detected";
+			case AST_CAUSE_CALL_DROPPED:  					/* 132 */
+				return "532 Call Dropped";
+			case AST_CAUSE_FAIL_COMMUNICATION_WITH_DIALER:  		/* 133 */
+				return "533 Communication Fail With Dialer";
+			case AST_CAUSE_ERROR_RECORDING:  						/* 134 */
+				return "534 Error Recording";	
+			case AST_CAUSE_IPBX_INTERNAL_CONGESTION:  						/* 135 */
+				return "535 Internal Ipbx Congestion";
+			case AST_CAUSE_IPBX_NO_ROUTE_AVAILABLE:  						/* 136 */
+				return "536 Ipbx no route available";			
+			case AST_CAUSE_INVERTED_IVR_DECLINED_BY_CUSTOMER:  						/* 140 */
+				return "540 IVR declined by customer";				
+			case AST_CAUSE_INVERTED_IVR_CALL_LATER:  						/* 141 */
+				return "541 Inverted ivr call later";		
+			case AST_CAUSE_INVERTED_IVR_NO_RESPONSE_FROM_CUSTOMER_SIDE:  						/* 142 */
+				return "542 Inverted ivr no response from customer side";
+			case AST_CAUSE_VACANT_143:  						/* 143 */
+				return "543 Vacant";
+			case AST_CAUSE_VACANT_144:  						/* 144 */
+				return "544 Vacant";
+			case AST_CAUSE_BLACKLISTED:  						/* 145 */
+				return "545 Blacklisted";
+			case AST_CAUSE_NO_ANSWER_AYTY:  						/* 146 */
+				return "546 No Answer Ayty";
+			case AST_CAUSE_VACANT_147:  						/* 147 */
+				return "547 Vacant";			
+			case AST_CAUSE_VACANT_148:  						/* 148 */
+				return "548 Vacant";
+			case AST_CAUSE_VACANT_149:  						/* 149 */
+				return "549 Vacant";
+			case AST_CAUSE_AMD_CARRIER_MESSAGE:  						/* 150 */
+				return "550 AMD Carrier message";
+			case AST_CAUSE_AMD_INITIAL_SILENCE:  						/* 151 */
+				return "551 AMD Carrier message";
+			case AST_CAUSE_AMD_MESSAGE_BOX:  						/* 152 */
+				return "552 AMD Message box";	
 
 		case AST_CAUSE_NOTDEFINED:
 		default:
@@ -7630,6 +7754,7 @@ static int sip_indicate(struct ast_chann
 {
 	struct sip_pvt *p = ast_channel_tech_pvt(ast);
 	int res = 0;
+	struct ast_app *theapp;
 
 	if (!p) {
 		ast_debug(1, "Asked to indicate condition on channel %s with no pvt; ignoring\n",
@@ -7638,6 +7763,20 @@ static int sip_indicate(struct ast_chann
 	}
 
 	sip_pvt_lock(p);
+		
+	RAII_VAR(struct ast_channel *, bridge, NULL, ast_channel_cleanup);
+	RAII_VAR(struct ast_channel *, owner_ref, NULL, ast_channel_cleanup);
+
+	
+	if (p->owner) {
+		
+		owner_ref = ast_channel_ref(p->owner);
+
+		bridge = ast_channel_bridge_peer(owner_ref);
+
+	}
+
+
 	switch(condition) {
 	case AST_CONTROL_RINGING:
 		if (ast_channel_state(ast) == AST_STATE_RING) {
@@ -7725,10 +7864,36 @@ static int sip_indicate(struct ast_chann
 		res = -1;
 		break;
 	case AST_CONTROL_HOLD:
+		ast_debug(100, "Ayty - Start RTP Hold.\n");
+		//ast_log(LOG_WARNING, "Start RTP Hold.\n");
+		if(bridge){
+			theapp = pbx_findapp("Macro");
+			if (theapp) {
+				res = pbx_exec(bridge, theapp,"agent_hold");
+				ast_debug(1, "Macro exited with status %d\n", res);
+			} else {
+				ast_log(LOG_ERROR, "Could not find application Macro\n");
+			}
+		}
 		ast_rtp_instance_update_source(p->rtp);
 		ast_moh_start(ast, data, p->mohinterpret);
 		break;
 	case AST_CONTROL_UNHOLD:
+		ast_debug(100, "Ayty -Start RTP UnHold.\n");
+		//ast_log(LOG_WARNING, "Start RTP UnHold.\n");
+		if(bridge){
+			theapp = pbx_findapp("Macro");
+
+			//int macro_res;
+			//macro_res = ast_app_exec_macro(chan, peer, opt_args[OPT_ARG_CALLEE_MACRO]);
+
+			if (theapp) { 
+				res = pbx_exec(bridge, theapp,"agent_unhold");
+				ast_debug(1, "Macro exited with status %d\n", res);
+			} else {
+				ast_log(LOG_ERROR, "Could not find application Macro\n");
+			}
+		}
 		ast_rtp_instance_update_source(p->rtp);
 		ast_moh_stop(ast);
 		break;
@@ -10115,7 +10280,10 @@ static int process_sdp(struct sip_pvt *p
 						ast_set_flag(p->srtp, AST_SRTP_CRYPTO_OFFER_OK);
 					}
 				} else if (!strcmp(protocol, "RTP/SAVP") || !strcmp(protocol, "RTP/SAVPF")) {
+
+					
 					secure_audio = 1;
+
 				} else if (!strcmp(protocol, "RTP/AVPF") && !ast_test_flag(&p->flags[2], SIP_PAGE3_USE_AVPF)) {
 					if (req->method != SIP_RESPONSE) {
 						ast_log(LOG_NOTICE, "Received AVPF profile in audio offer but AVPF is not enabled, enabling: %s\n", m);
@@ -15896,7 +16064,8 @@ static void destroy_association(struct s
 {
 	int realtimeregs = ast_check_realtime("sipregs");
 	char *tablename = (realtimeregs) ? "sipregs" : "sippeers";
-
+	char membername[50] = "Local/";
+	
 	if (!sip_cfg.ignore_regexpire) {
 		if (peer->rt_fromcontact && sip_cfg.peer_rtupdate) {
 			ast_update_realtime(tablename, "name", peer->name, "fullcontact", "", "ipaddr", "", "port", "0", "regseconds", "0", "regserver", "", "useragent", "", "lastms", "0", SENTINEL);
@@ -15906,6 +16075,16 @@ static void destroy_association(struct s
 			ast_db_del("SIP/PeerMethods", peer->name);
 		}
 	}
+	/** Ayty
+	*
+	*
+	* 20170304 */
+	
+	ast_update_realtime("spr_ipbx" , "spr_ipbx_logoff_unavailable", peer->name, "", "0", SENTINEL);
+	/*  Local/000001@agent_call_v4/nj */
+	strncat(membername, peer->name, strlen(peer->name));
+	strncat(membername, "@agent_call_v4/nj", 17);
+	ast_destroy_realtime("queue_members", "membername", membername, SENTINEL);
 }
 
 static void set_socket_transport(struct sip_socket *socket, int transport)
@@ -16414,6 +16593,14 @@ static enum parse_register_result parse_
 	if (ast_sockaddr_cmp(&peer->addr, &oldsin)) {
 		ast_verb(3, "Registered SIP '%s' at %s\n", peer->name,
 			ast_sockaddr_stringify(&peer->addr));
+	
+		/** Ayty
+		*
+		* 20170304
+		*/
+		
+		ast_update_realtime("spr_ipbx" , "spr_ipbx_login_available", peer->name, "", "1", SENTINEL);
+		ast_log(LOG_NOTICE, "Peer '%s' has been added to database\n", peer->name);
 	}
 	sip_pvt_unlock(pvt);
 	sip_poke_peer(peer, 0);
@@ -23475,7 +23662,8 @@ static void handle_response_notify(struc
 		/* They got the notify, this is the end */
 		if (p->owner) {
 			if (p->refer) {
-				ast_log(LOG_NOTICE, "Got OK on REFER Notify message\n");
+				ast_log(LOG_NOTICE, "Got OK on REFER Notify message on %s \n",ast_channel_name(p->owner));
+				
 			} else {
 				ast_log(LOG_WARNING, "Notify answer on an owned channel? - %s\n", ast_channel_name(p->owner));
 			}
@@ -23905,9 +24093,10 @@ static void handle_response_peerpoke(str
 
 		snprintf(str_lastms, sizeof(str_lastms), "%d", pingtime);
 
-		ast_log(LOG_NOTICE, "Peer '%s' is now %s. (%dms / %dms)\n",
-			peer->name, s, pingtime, peer->maxms);
+		ast_log(LOG_NOTICE, "Peer '%s' it now %s. (%dms / %dms)\n",
+			peer->name,s, pingtime, peer->maxms);
 		ast_devstate_changed(AST_DEVICE_UNKNOWN, AST_DEVSTATE_CACHABLE, "SIP/%s", peer->name);
+		
 		if (sip_cfg.peer_rtupdate) {
 			ast_update_realtime(ast_check_realtime("sipregs") ? "sipregs" : "sippeers", "name", peer->name, "lastms", str_lastms, SENTINEL);
 		}
@@ -26186,6 +26375,8 @@ static int handle_request_refer(struct s
 	RAII_VAR(struct ast_channel *, transferer, NULL, ast_channel_cleanup);
 	RAII_VAR(struct ast_str *, replaces_str, NULL, ast_free_ptr);
 
+
+	
 	if (req->debug) {
 		ast_verbose("Call %s got a SIP call transfer from %s: (REFER)!\n",
 			p->callid,
@@ -26262,6 +26453,7 @@ static int handle_request_refer(struct s
 		return 0;
 	}
 
+	
 	if (ast_strlen_zero(p->context)) {
 		ast_string_field_set(p, context, sip_cfg.default_context);
 	}
@@ -26287,7 +26479,7 @@ static int handle_request_refer(struct s
 
 	/* Get the transferer's channel */
 	transferer = ast_channel_ref(p->owner);
-
+	
 	if (sipdebug) {
 		ast_debug(3, "SIP %s transfer: Transferer channel %s\n",
 			p->refer->attendedtransfer ? "attended" : "blind",
@@ -26298,12 +26490,18 @@ static int handle_request_refer(struct s
 
 	/* From here on failures will be indicated with NOTIFY requests */
 	transmit_response(p, "202 Accepted", req);
-
+	
+	/* Ayty 20171122 Salvar variavel no Sip PVT com sucesso de transferencia */
+	pbx_builtin_setvar_helper(p->owner, "HAS_TRANSFERED","1");
+	ast_log(LOG_NOTICE, "Transfer with Owner %s\n",ast_channel_name(p->owner));
+	
 	/* Attended transfer: Find all call legs and bridge transferee with target*/
 	if (p->refer->attendedtransfer) {
 		/* both p and p->owner _MUST_ be locked while calling local_attended_transfer */
 		if ((res = local_attended_transfer(p, transferer, seqno, nounlock))) {
 			ast_clear_flag(&p->flags[0], SIP_GOTREFER);
+
+
 			return res;
 		}
 		/* Fall through for remote transfers that we did not find locally */
@@ -26311,6 +26509,8 @@ static int handle_request_refer(struct s
 			ast_debug(4, "SIP attended transfer: Still not our call - generating INVITE with replaces\n");
 		}
 		/* Fallthrough if we can't find the call leg internally */
+
+		ast_log(LOG_NOTICE, "Transfer with no Owner? %s to %s \n",ast_channel_name(transferer),ast_channel_name(p->owner));
 	}
 
 	/* Copy data we can not safely access after letting the pvt lock go. */
@@ -26347,11 +26547,17 @@ static int handle_request_refer(struct s
 		*nounlock = 1;
 	}
 
+	ast_log(LOG_NOTICE, "Debug 2");
+	
+
 	ast_set_flag(&p->flags[0], SIP_DEFER_BYE_ON_TRANSFER);
 	sip_pvt_unlock(p);
 	transfer_res = ast_bridge_transfer_blind(1, transferer, refer_to, refer_to_context, blind_transfer_cb, &cb_data);
 	sip_pvt_lock(p);
 
+
+	ast_log(LOG_NOTICE, "Debug 3");
+	
 	switch (transfer_res) {
 	case AST_BRIDGE_TRANSFER_INVALID:
 		res = -1;
@@ -26379,6 +26585,8 @@ static int handle_request_refer(struct s
 		p->refer->status = REFER_200OK;
 		transmit_notify_with_sipfrag(p, seqno, "200 OK", TRUE);
 		append_history(p, "Xfer", "Refer succeeded.");
+		ast_log(LOG_NOTICE, "Debug 4");
+		
 		break;
 	default:
 		break;
@@ -26641,6 +26849,33 @@ static int handle_request_bye(struct sip
 		sip_queue_hangup_cause(p, 0);
 		sip_scheddestroy_final(p, DEFAULT_TRANS_TIMEOUT);
 		ast_debug(3, "Received bye, issuing owner hangup\n");
+		
+		/** Ayty
+		*/
+
+
+		if (!ast_strlen_zero(sip_get_header(req, "X-Asterisk-HangupCauseCode"))) {
+			pbx_builtin_setvar_helper(p->owner, "REC_HC",sip_get_header(req, "X-Asterisk-HangupCauseCode"));
+			pbx_builtin_setvar_helper(p->owner, "REC_BYE","Y");
+			ast_verb(100, "Received Hangup in %s\n",ast_channel_name(p->owner));
+			
+			c = p->owner;
+			if (c) {
+				if (peer_channel) {
+					ast_debug(3, "Possui bridge channel %s \n",ast_channel_name(peer_channel));
+					pbx_builtin_setvar_helper(peer_channel, "REC_HC",sip_get_header(req, "X-Asterisk-HangupCauseCode"));
+				}
+			}
+			ast_debug(3, "Variavel X-Asterisk-HangupCauseCode possui valor %s em %s \n",sip_get_header(req, "X-Asterisk-HangupCauseCode"),ast_channel_name(p->owner));
+
+		}
+		
+			
+		/***
+		* Ayty
+		*/
+		
+		
 	} else {
 		sip_scheddestroy_final(p, DEFAULT_TRANS_TIMEOUT);
 		ast_debug(3, "Received bye, no owner, selfdestruct soon.\n");
@@ -29335,12 +29570,14 @@ static int sip_send_keepalive(const void
 static int sip_poke_noanswer(const void *data)
 {
 	struct sip_peer *peer = (struct sip_peer *)data;
-
+	
 	peer->pokeexpire = -1;
+	
 
 	if (peer->lastms > -1) {
 
 		ast_log(LOG_NOTICE, "Peer '%s' is now UNREACHABLE!  Last qualify: %d\n", peer->name, peer->lastms);
+		
 		if (sip_cfg.peer_rtupdate) {
 			ast_update_realtime(ast_check_realtime("sipregs") ? "sipregs" : "sippeers", "name", peer->name, "lastms", "-1", SENTINEL);
 		}
@@ -29362,13 +29599,25 @@ static int sip_poke_noanswer(const void 
 	if (peer->call) {
 		dialog_unlink_all(peer->call);
 		peer->call = dialog_unref(peer->call, "unref dialog peer->call");
-		/* peer->call = sip_destroy(peer->call);*/
+		/* 
+		peer->call = sip_destroy(peer->call);
+		*/
+		
+		
 	}
 
 	/* Don't send a devstate change if nothing changed. */
 	if (peer->lastms > -1) {
 		peer->lastms = -1;
 		ast_devstate_changed(AST_DEVICE_UNKNOWN, AST_DEVSTATE_CACHABLE, "SIP/%s", peer->name);
+		
+		/** Ayty
+		*
+		*20170304
+		*/
+		ast_log(LOG_NOTICE, "Peer '%s' is removed from database\n", peer->name);
+		ast_update_realtime("spr_ipbx" , "spr_ipbx_logoff_unavailable", peer->name, "", "0", SENTINEL);
+		
 	}
 
 	/* Try again quickly */
